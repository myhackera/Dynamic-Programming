Recursive solution 
==================>>>

class Solution:
    
    def f(self, i, j):
        
        if i == 0 and j == 0:
            return 1
        if i < 0 or j < 0:
            return 0
        
        up = self.f(i-1, j)
        left = self.f(i, j-1)
        
        return up+left
    
    def uniquePaths(self, m: int, n: int) -> int:
    
        return self.f(m-1, n-1)
        
        
Memoization code
================>>>>

class Solution:
    
    def f(self, i, j, dp):
        
        if i == 0 and j == 0:
            return 1
        if i < 0 or j < 0:
            return 0
        
        if dp[i][j] != -1:
            return dp[i][j]
        
        up = self.f(i-1, j, dp)
        left = self.f(i, j-1, dp)
        
        dp[i][j] = up+left
        return dp[i][j]
    
    def uniquePaths(self, m: int, n: int) -> int:
        
        dp = [[-1]*n for _ in range(m)]
        return self.f(m-1, n-1, dp)

TC : O(N*M)
SC : O((N-1)+(M-1)) + O(N*M)

Tabulation Code
=================>>>>

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        
        dp = [[-1]*n for _ in range(m)]
        
        for i in range(m):
            for j in range(n):
                
                if i == 0 and j == 0:
                    dp[i][j] = 1
                    
                else:
                    up = left = 0
                    if i > 0:
                        up = dp[i-1][j]
                    if j > 0:
                        left = dp[i][j-1]
                    
                    dp[i][j] = up + left
                    
        
        return dp[m-1][n-1]
        
TC : O(N*M)
SC : O(N*M)
