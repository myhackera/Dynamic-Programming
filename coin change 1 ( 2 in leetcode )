Recursive solution 
===================>>>>

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        
        def solve(n, amount):

            if amount == 0:
                return 1
            if amount < 0:
                return 0
            if amount >= 1 and n <= 0:
                return 0

            return solve(n-1, amount) + solve(n, amount-coins[n-1])
        
        return solve(len(coins), amount)
            

Tabulation solution
=====================>>>>

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        
        n = len(coins)
        
        t = [[0 for j in range(amount+1)] for i in range(n+1)]
        
        for i in range(n+1):
            for j in range(amount+1):
                
                if i == 0:
                    t[i][j] = 0
                if j == 0:
                    t[i][j] = 1
                    
        for i in range(1, n+1):
            for j in range(1, amount+1):
                
                if coins[i-1] <= j:
                    t[i][j] = t[i-1][j] + t[i][j-coins[i-1]]
                else:
                    t[i][j] = t[i-1][j]
        return t[n][amount]
