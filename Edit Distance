SOLUTION 1.)
==============>>>>

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        
        m = len(word1)
        n = len(word2)
        
        def check(i, j):
            
            if i < 0:
                return j+1
            if j < 0:
                return i+1
            
            if word1[i] == word2[j]:
                return check(i-1, j-1)
            else:
                return 1 + min(check(i-1, j), check(i,j-1), check(i-1, j-1))   # delete word1, insert character in word1, update character in word1
                
                
        return check(m-1, n-1)
        
SOLUTION 2.)
===============>>>>>

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        
        m = len(word1)
        n = len(word2)
        
        dp = [[-1]*n for i in range(m)]
        
        def check(i, j):
            
            if i < 0:
                return j+1
            if j < 0:
                return i+1
            
            if dp[i][j] != -1:
                return dp[i][j]
            
            if word1[i] == word2[j]:
                dp[i][j] = check(i-1, j-1)
            else:
                dp[i][j] =  1 + min(check(i-1, j), check(i,j-1), check(i-1, j-1))
            return dp[i][j]
                
        return check(m-1, n-1)
        
SOLUTION 3.)
==============>>>>>

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        
        m = len(word1)
        n = len(word2)
        
        dp = [[-1]*(n+1) for i in range(m+1)]
        

        for i in range(m+1):
            dp[i][0] = i

        for j in range(n+1):
            dp[0][j] = j

        for i in range(1, m+1):
            for j in range(1, n+1):

                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    dp[i][j] =  1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])

                
        return dp[m][n]
