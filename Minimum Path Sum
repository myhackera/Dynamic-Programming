SOLUTION 1.)
=============>>>>>

import sys
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        
        m = len(grid)
        n = len(grid[0])
        
        dp = [[-1]*n for _ in range(m)]
        
        def path(i, j):
          
            if i == 0 and j == 0:
                return grid[0][0]
            if i < 0 or j < 0:
                return sys.maxsize
                
            if dp[i][j] != -1:
                return dp[i][j]
            
            up = grid[i][j] + path(i-1, j)
            left = grid[i][j] + path(i, j-1)
            
            dp[i][j] = min(up, left)
            return dp[i][j]
        
        return path(m-1, n-1)
        
SOLUTION 2.)
==============>>>>>>

import sys
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        
        m = len(grid)
        n = len(grid[0])
        
        dp = [[-1]*n for _ in range(m)]
        
        for i in range(m):
            for j in range(n):
                
                if i == 0 and j == 0:
                    dp[i][j] = grid[i][j]
                else:
                    up = left = 0
                    
                    if i > 0:
                        up = grid[i][j] + dp[i-1][j]
                    else:
                        up = grid[i][j] + sys.maxsize
                        
                    if j > 0:
                        left = grid[i][j] + dp[i][j-1]
                    else:
                        left = grid[i][j] + sys.maxsize
                        
                    dp[i][j] = min(up, left)
                    
        return dp[m-1][n-1]
