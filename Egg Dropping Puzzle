Recursive Solution 
===================>>>>>>

import sys
class Solution:
    def solve(self, egg, floor):
        
        if floor == 1 or floor == 0:
            return floor
        if egg == 1:
            return floor
            
        mn = sys.maxsize
        for k in range(1, floor+1, 1):
            temp = 1 + max(self.solve(egg-1, k-1), self.solve(egg, floor-k))
            mn = min(mn, temp)
            
        return mn
    
    def eggDrop(self,n, k):
        
        return self.solve(n, k)
        
Memoization problem
===================>>>>

import sys
class Solution:
    global dp
    dp = [[-1]*(201) for _ in range(201)]
    
    def solve(self, egg, floor):
        
        if floor == 1 or floor == 0:
            return floor
        if egg == 1:
            return floor
            
        if dp[egg][floor] != -1:
            return dp[egg][floor]
        
        mn = sys.maxsize
        for k in range(1, floor+1, 1):
            temp = 1 + max(self.solve(egg-1, k-1), self.solve(egg, floor-k))
            mn = min(mn, temp)
            
        dp[egg][floor] = mn
        return dp[egg][floor]
    
    def eggDrop(self,n, k):
        
        return self.solve(n, k)
        
