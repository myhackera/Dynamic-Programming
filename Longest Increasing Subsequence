SOLUTION 1.)
===================================>>>>>

class Solution:
    def longestSubsequence(self,a,n):
        
        dp = [0]*n
        for i in range(n):
            
            maxi = 0
            
            for j in range(i):
                if a[i] > a[j]:
                    if dp[j] > maxi:
                        maxi = dp[j]
                        
            dp[i] = maxi+1
            
        return max(dp)  
        
SOLUTION 2.)
===========================================>>>>
        
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        
         n = len(nums)
         dp = [1]*n
        
         for i in range(1, n):
             for j in range(i):
                 if nums[i] > nums[j] and dp[i] < dp[j]+1:
                     dp[i] = 1+dp[j]
         return max(dp)
         
Solution 3.)
========================>>>
LCS variation

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:

        n = len(nums)

        lis = sorted(list(set(nums)))
        m = len(lis)
        dp = [[-1]*(m+1) for _ in range(n+1)]
        for i in range(n+1):
            for j in range(m+1):
                
                if i == 0 or j == 0:
                    dp[i][j] = 0
                elif nums[i-1] == lis[j-1]:
                    dp[i][j] = 1 + dp[i-1][j-1]
                else:
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])
        return dp[-1][-1]
